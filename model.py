from typing import Any, List


class Model:
    """
    Base class for the models.
    """

    def __init__(self, data):
        """Constructor that takes in the dataframe from pandas"""
        self.data = data

    def generate_time_series_dataset(self, **kwargs) -> Any:
        """
        Generate a dataset that contains time-series dataset

        :return: a time-series dataset
        """
        raise NotImplementedError()

    def generate_model(self, data, **kwargs) -> Any:
        """
        Generate a model that can take a time-series dataset in as training

        :param data: a time-series dataset

        :return: an untrained model
        """
        raise NotImplementedError()

    def train_model(self, data, model, **kwargs) -> Any:
        """
        Train model that has been generated

        :param data: the time-series dataset
        :param model: the untrained model

        :return: a trained model
        """
        raise NotImplementedError()

    def load_model(self, **kwargs) -> Any:
        """
        Load in a pre-trained model that has been generated by this algorithm

        :return: a trained model
        """
        raise NotImplementedError

    def predict(self, model, **kwargs) -> List:
        """
        Predict a forecast by using the pre-trained model

        :param model: a trained model

        :return: a list of prediction
        """
        raise NotImplementedError()

    def tune_hyper_parameter(self, **kwargs):
        """
        Hyper tune different models

        :return: the best hyper-tuned model
        """
        raise NotImplementedError()

